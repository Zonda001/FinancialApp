package com.example.financegame.ui.screens.settings

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.financegame.data.local.database.AppDatabase
import com.example.financegame.data.settings.AppTheme
import com.example.financegame.data.settings.SettingsDataStore
import com.example.financegame.data.settings.ThemeMode
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch

class SettingsViewModel(application: Application) : AndroidViewModel(application) {
    private val settingsDataStore = SettingsDataStore(application)
    private val database = AppDatabase.getDatabase(application)

    val themeMode: StateFlow<ThemeMode> = settingsDataStore.themeFlow
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = ThemeMode.SYSTEM
        )

    val appTheme: StateFlow<AppTheme> = settingsDataStore.appThemeFlow
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = AppTheme.OCEAN
        )

    val language: StateFlow<String> = settingsDataStore.languageFlow
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = "uk"
        )

    val currency: StateFlow<String> = settingsDataStore.currencyFlow
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = "–≥—Ä–Ω"
        )

    val notificationsEnabled: StateFlow<Boolean> = settingsDataStore.notificationsFlow
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = false
        )

    val biometricEnabled: StateFlow<Boolean> = settingsDataStore.biometricFlow
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = false
        )

    val budgetAlertsEnabled: StateFlow<Boolean> = settingsDataStore.budgetAlertsFlow
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = false
        )

    fun setTheme(theme: ThemeMode) {
        viewModelScope.launch {
            settingsDataStore.saveTheme(theme)

            // ‚úÖ –ö–≤–µ—Å—Ç: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–π —Ç–µ–º—É"
            checkAndCompleteQuest("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–π —Ç–µ–º—É")
            checkAndCompleteQuest("üé® –°–ø—Ä–æ–±—É–π —Ç–µ–º–Ω—É —Ç–µ–º—É")
        }
    }

    fun setAppTheme(theme: AppTheme) {
        viewModelScope.launch {
            settingsDataStore.saveAppTheme(theme)

            // ‚úÖ –ö–≤–µ—Å—Ç: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–π —Ç–µ–º—É"
            checkAndCompleteQuest("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–π —Ç–µ–º—É")
        }
    }

    fun setLanguage(language: String) {
        viewModelScope.launch {
            settingsDataStore.saveLanguage(language)
        }
    }

    fun setCurrency(currency: String) {
        viewModelScope.launch {
            settingsDataStore.saveCurrency(currency)

            // ‚úÖ –ö–≤–µ—Å—Ç: "üí∞ –í–∏–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É"
            checkAndCompleteQuest("üí∞ –í–∏–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É")
        }
    }

    fun setNotificationsEnabled(enabled: Boolean) {
        viewModelScope.launch {
            settingsDataStore.saveNotificationsEnabled(enabled)

            // ‚úÖ –ö–≤–µ—Å—Ç: "üîî –£–≤—ñ–º–∫–Ω–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
            if (enabled) {
                checkAndCompleteQuest("üîî –£–≤—ñ–º–∫–Ω–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
            }
        }
    }

    fun setBiometricEnabled(enabled: Boolean) {
        viewModelScope.launch {
            settingsDataStore.saveBiometricEnabled(enabled)
        }
    }

    fun setBudgetAlertsEnabled(enabled: Boolean) {
        viewModelScope.launch {
            settingsDataStore.saveBudgetAlertsEnabled(enabled)
        }
    }

    // ‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–≤–µ—Å—Ç—ñ–≤
    private suspend fun checkAndCompleteQuest(questTitle: String) {
        val quests = database.questDao().getActiveQuests().first()
        val quest = quests.find { it.title == questTitle }

        quest?.let {
            if (!it.isCompleted) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–æ 100%
                database.questDao().updateQuestProgress(it.id, 1f)
                // –í–∏–∫–æ–Ω—É—î–º–æ –∫–≤–µ—Å—Ç

            }
        }
    }
}