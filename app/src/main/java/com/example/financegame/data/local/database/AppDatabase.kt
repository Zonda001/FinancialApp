package com.example.financegame.data.local.database

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.sqlite.db.SupportSQLiteDatabase
import com.example.financegame.data.local.database.dao.*
import com.example.financegame.data.local.database.entities.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

// ======================== ROOM DATABASE ========================
@Database(
    entities = [User::class, Expense::class, Quest::class, Achievement::class],
    version = 1,
    exportSchema = false
)
abstract class AppDatabase : RoomDatabase() {
    abstract fun userDao(): UserDao
    abstract fun expenseDao(): ExpenseDao
    abstract fun questDao(): QuestDao
    abstract fun achievementDao(): AchievementDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "finance_game_database"
                )
                    .addCallback(DatabaseCallback())
                    .build()
                INSTANCE = instance
                instance
            }
        }
    }

    // Callback –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    private class DatabaseCallback : RoomDatabase.Callback() {
        override fun onCreate(db: SupportSQLiteDatabase) {
            super.onCreate(db)
            INSTANCE?.let { database ->
                CoroutineScope(Dispatchers.IO).launch {
                    populateDatabase(database)
                }
            }
        }

        suspend fun populateDatabase(database: AppDatabase) {
            val userDao = database.userDao()
            val questDao = database.questDao()
            val achievementDao = database.achievementDao()

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            userDao.insertUser(
                User(
                    id = 1,
                    name = "–ì—Ä–∞–≤–µ—Ü—å",
                    email = "",
                    level = 1,
                    experience = 0,
                    totalPoints = 0
                )
            )

            // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—ñ –∫–≤–µ—Å—Ç–∏
            val startQuests = listOf(
                Quest(
                    title = "–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫",
                    description = "–î–æ–¥–∞–π —Å–≤–æ—é –ø–µ—Ä—à—É –≤–∏—Ç—Ä–∞—Ç—É",
                    reward = 50,
                    questType = QuestType.SAVE_MONEY
                ),
                Quest(
                    title = "–ï–∫–æ–Ω–æ–º–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å",
                    description = "–í–∏—Ç—Ä–∞—á–∞–π –º–µ–Ω—à–µ 500 –≥—Ä–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
                    targetAmount = 500.0,
                    targetDays = 7,
                    reward = 150,
                    questType = QuestType.WEEKLY_GOAL
                ),
                Quest(
                    title = "–ë–µ–∑ —Ñ–∞—Å—Ç—Ñ—É–¥—É",
                    description = "7 –¥–Ω—ñ–≤ –±–µ–∑ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ —Ñ–∞—Å—Ç—Ñ—É–¥",
                    category = "–á–∂–∞",
                    targetDays = 7,
                    reward = 200,
                    questType = QuestType.NO_SPENDING
                )
            )
            startQuests.forEach { questDao.insertQuest(it) }

            // –î–æ–¥–∞—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
            val startAchievements = listOf(
                Achievement(
                    title = "–ù–æ–≤–∞—á–æ–∫",
                    description = "–î–æ–¥–∞–π –ø–µ—Ä—à—É –≤–∏—Ç—Ä–∞—Ç—É",
                    icon = "üéØ",
                    requirement = 1,
                    category = AchievementCategory.GENERAL
                ),
                Achievement(
                    title = "–ï–∫–æ–Ω–æ–º–Ω–∏–π",
                    description = "–ó–∞–æ—â–∞–¥—å 1000 –≥—Ä–Ω",
                    icon = "üí∞",
                    requirement = 1000,
                    category = AchievementCategory.SAVINGS
                ),
                Achievement(
                    title = "–ì–µ—Ä–æ–π –∫–≤–µ—Å—Ç—ñ–≤",
                    description = "–í–∏–∫–æ–Ω–∞–π 5 –∫–≤–µ—Å—Ç—ñ–≤",
                    icon = "üèÜ",
                    requirement = 5,
                    category = AchievementCategory.QUESTS
                ),
                Achievement(
                    title = "–¢–∏–∂–Ω–µ–≤–∞ —Å–µ—Ä—ñ—è",
                    description = "–í—ñ–¥—Å—Ç–µ–∂—É–π –≤–∏—Ç—Ä–∞—Ç–∏ 7 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å",
                    icon = "üî•",
                    requirement = 7,
                    category = AchievementCategory.STREAK
                ),
                Achievement(
                    title = "–ú–∞–π—Å—Ç–µ—Ä —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤",
                    description = "–î–æ—Å—è–≥–Ω–∏ 10 —Ä—ñ–≤–Ω—è",
                    icon = "üëë",
                    requirement = 10,
                    category = AchievementCategory.GENERAL
                )
            )
            startAchievements.forEach { achievementDao.insertAchievement(it) }
        }
    }
}