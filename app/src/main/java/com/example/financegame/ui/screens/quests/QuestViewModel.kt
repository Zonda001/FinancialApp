package com.example.financegame.ui.screens.quests

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.financegame.data.local.database.AppDatabase
import com.example.financegame.data.local.database.entities.Quest
import com.example.financegame.data.local.database.entities.QuestType
import com.example.financegame.data.repository.QuestRepository
import com.example.financegame.data.repository.UserRepository
import com.example.financegame.data.repository.ExpenseRepository
import com.example.financegame.util.AchievementTracker
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import java.util.Calendar

class QuestViewModel(application: Application) : AndroidViewModel(application) {
    private val database = AppDatabase.getDatabase(application)
    private val questRepository = QuestRepository(database.questDao())
    private val userRepository = UserRepository(database.userDao())
    private val expenseRepository = ExpenseRepository(database.expenseDao())

    // üÜï –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å
    private val achievementTracker = AchievementTracker(database, viewModelScope)

    val activeQuests: StateFlow<List<Quest>> = questRepository.getActiveQuests()
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = emptyList()
        )

    val completedQuests: StateFlow<List<Quest>> = questRepository.getCompletedQuests()
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = emptyList()
        )

    init {
        viewModelScope.launch {
            expenseRepository.getAllExpenses(1).collect {
                checkAndUpdateQuestProgress()
            }
        }
    }

    private suspend fun checkAndUpdateQuestProgress() {
        activeQuests.value.forEach { quest ->
            when (quest.questType) {
                QuestType.SAVE_MONEY -> checkSaveMoneyQuest(quest)
                QuestType.NO_SPENDING -> checkNoSpendingQuest(quest)
                QuestType.WEEKLY_GOAL -> checkWeeklyGoalQuest(quest)
                QuestType.DAILY_LIMIT -> checkDailyLimitQuest(quest)
            }
        }
    }

    private suspend fun checkSaveMoneyQuest(quest: Quest) {
        if (quest.title == "–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫") {
            expenseRepository.getAllExpenses(1).first().let { expenses ->
                if (expenses.isNotEmpty() && !quest.isCompleted) {
                    // ‚úÖ –¢—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–æ 100%, –Ω–µ –∑–∞–≤–µ—Ä—à—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
                    questRepository.updateQuestProgress(quest.id, 1f)
                }
            }
            return
        }

        val endTime = quest.startDate + (quest.targetDays * 24 * 60 * 60 * 1000L)
        expenseRepository.getTotalExpenses(1, quest.startDate, endTime).firstOrNull()?.let { total ->
            val saved = quest.targetAmount - (total ?: 0.0)
            val progress = (saved / quest.targetAmount).toFloat().coerceIn(0f, 1f)

            // ‚úÖ –¢—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å, –Ω–µ –∑–∞–≤–µ—Ä—à—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            questRepository.updateQuestProgress(quest.id, progress)
        }
    }

    private suspend fun checkNoSpendingQuest(quest: Quest) {
        val now = System.currentTimeMillis()
        val daysPassed = ((now - quest.startDate) / (24 * 60 * 60 * 1000)).toInt()

        expenseRepository.getExpensesByCategory(1, quest.category).firstOrNull()?.let { expenses ->
            val expensesInPeriod = expenses.filter {
                it.date >= quest.startDate && it.date <= now
            }

            if (expensesInPeriod.isEmpty() && daysPassed >= quest.targetDays) {
                // ‚úÖ –¢—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–æ 100%
                questRepository.updateQuestProgress(quest.id, 1f)
            } else {
                val progress = (daysPassed.toFloat() / quest.targetDays.toFloat()).coerceIn(0f, 1f)
                questRepository.updateQuestProgress(quest.id, progress)
            }
        }
    }

    private suspend fun checkWeeklyGoalQuest(quest: Quest) {
        val now = System.currentTimeMillis()
        val endTime = quest.startDate + (quest.targetDays * 24 * 60 * 60 * 1000L)

        // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä—ñ–æ–¥ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
        val periodCompleted = now >= endTime

        expenseRepository.getTotalExpenses(1, quest.startDate, endTime).firstOrNull()?.let { total ->
            val actualTotal = total ?: 0.0

            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            if (actualTotal <= quest.targetAmount) {
                // –í–∏—Ç—Ä–∞—Ç–∏ –≤ –º–µ–∂–∞—Ö –ª—ñ–º—ñ—Ç—É
                if (periodCompleted) {
                    // ‚úÖ –ü–µ—Ä—ñ–æ–¥ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å 100%, –∞–ª–µ –ù–ï –∑–∞–≤–µ—Ä—à—É—î–º–æ
                    questRepository.updateQuestProgress(quest.id, 1f)
                } else {
                    // –ü–µ—Ä—ñ–æ–¥ —â–µ –π–¥–µ - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ —á–∞—Å—É
                    val timeProgress = ((now - quest.startDate).toFloat() / (endTime - quest.startDate).toFloat()).coerceIn(0f, 0.99f)
                    questRepository.updateQuestProgress(quest.id, timeProgress)
                }
            } else {
                // ‚ùå –í–∏—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç - –∫–≤–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π
                val moneyProgress = (quest.targetAmount / actualTotal).toFloat().coerceIn(0f, 0.99f)
                questRepository.updateQuestProgress(quest.id, moneyProgress)
            }
        }
    }

    private suspend fun checkDailyLimitQuest(quest: Quest) {
        val calendar = Calendar.getInstance()
        calendar.set(Calendar.HOUR_OF_DAY, 0)
        calendar.set(Calendar.MINUTE, 0)
        val startOfDay = calendar.timeInMillis

        expenseRepository.getTotalExpenses(1, startOfDay, System.currentTimeMillis()).firstOrNull()?.let { total ->
            val progress = if (total != null && total <= quest.targetAmount) {
                1f
            } else {
                ((quest.targetAmount / (total ?: quest.targetAmount)).toFloat()).coerceIn(0f, 1f)
            }

            // ‚úÖ –¢—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            questRepository.updateQuestProgress(quest.id, progress)
        }
    }

    // ‚úÖ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É"
    fun completeQuest(quest: Quest) {
        viewModelScope.launch {
            questRepository.completeQuest(quest.id)

            userRepository.getCurrentUser().first()?.let { user ->
                val newExp = user.experience + quest.reward
                val newLevel = calculateLevel(newExp)
                val newTotalPoints = user.totalPoints + quest.reward

                userRepository.updateUser(
                    user.copy(
                        experience = newExp,
                        level = newLevel,
                        totalPoints = newTotalPoints
                    )
                )

                // üÜï –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
                achievementTracker.onQuestCompleted()
                achievementTracker.onLevelUp(newLevel)
            }

            checkAndUpdateQuestProgress()
        }
    }

    fun refreshQuests() {
        viewModelScope.launch {
            checkAndUpdateQuestProgress()
        }
    }

    // üÜï –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ö–≤–µ—Å—Ç–∏ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é –∑–∞–º—ñ—Å—Ç—å –º–∏—Ç—Ç—î–≤–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    fun getQuestNavigationTarget(quest: Quest): QuestNavigationTarget? {
        return when {
            quest.title.contains("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É") -> QuestNavigationTarget.REPORTS
            quest.title.contains("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–π —Ç–µ–º—É") -> QuestNavigationTarget.SETTINGS
            quest.title.contains("üèÜ –ü–µ—Ä–µ–≥–ª—è–Ω—å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è") -> QuestNavigationTarget.ACHIEVEMENTS
            quest.title.contains("üåü –ó–º—ñ–Ω–∏ –∞–≤–∞—Ç–∞—Ä") -> QuestNavigationTarget.PROFILE
            quest.title.contains("üé® –°–ø—Ä–æ–±—É–π —Ç–µ–º–Ω—É —Ç–µ–º—É") -> QuestNavigationTarget.SETTINGS
            quest.title.contains("üí∞ –í–∏–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É") -> QuestNavigationTarget.SETTINGS
            quest.title.contains("üîî –£–≤—ñ–º–∫–Ω–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è") -> QuestNavigationTarget.SETTINGS
            else -> null
        }
    }

    // –î–ª—è –∫–≤–µ—Å—Ç—ñ–≤ —è–∫—ñ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–¥—Ä–∞–∑—É
    fun canCompleteInstantly(quest: Quest): Boolean {
        return when {
            quest.title.contains("üéØ –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç") -> true
            quest.title.contains("üí™ –©–æ–¥–µ–Ω–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ—è") -> true
            quest.title.contains("üéÅ –ë–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞") -> true
            else -> false
        }
    }

    fun completeOneClickQuest(questId: Int) {
        viewModelScope.launch {
            activeQuests.value.find { it.id == questId }?.let { quest ->
                if (canCompleteInstantly(quest)) {
                    questRepository.updateQuestProgress(quest.id, 1f)
                    completeQuest(quest)
                }
            }
        }
    }

    private fun calculateLevel(experience: Int): Int {
        return (kotlin.math.sqrt(experience.toDouble() / 100.0)).toInt() + 1
    }
}

// üÜï Enum –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–≤–µ—Å—Ç—ñ–≤
enum class QuestNavigationTarget {
    REPORTS,
    SETTINGS,
    ACHIEVEMENTS,
    PROFILE
}